// Script para corregir reservas desalineadas en producci√≥n y verificar
const API_URL = 'https://restaurante-ai-platform.vercel.app';
const RESTAURANT_ID = 'rest_003';

async function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function waitForDeploy() {
  console.log('‚è≥ Esperando a que el deploy de Vercel est√© listo...\n');
  
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    try {
      const response = await fetch(`${API_URL}/api/health`);
      if (response.ok) {
        console.log('‚úÖ Deploy listo!\n');
        return true;
      }
    } catch (error) {
      // Ignorar errores de conexi√≥n
    }
    
    attempts++;
    process.stdout.write(`   Intento ${attempts}/${maxAttempts}... esperando 10s\r`);
    await wait(10000);
  }
  
  console.log('\n‚ö†Ô∏è  El deploy puede no estar listo, pero continuaremos de todas formas...\n');
  return false;
}

async function main() {
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üîß CORRECCI√ìN DE RESERVAS EN GOOGLE SHEETS');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  try {
    // Esperar a que el deploy est√© listo
    await waitForDeploy();
    
    // ============================================
    // PASO 1: Analizar reservas actuales
    // ============================================
    console.log('üìä PASO 1: Analizando reservas actuales...\n');
    
    const reservasResponse = await fetch(`${API_URL}/api/google-sheets/reservas?restaurantId=${RESTAURANT_ID}`);
    
    if (!reservasResponse.ok) {
      const text = await reservasResponse.text();
      console.error('‚ùå Error al obtener reservas:', text.substring(0, 200));
      return;
    }
    
    const reservasData = await reservasResponse.json();
    
    console.log(`‚úì Total de reservas encontradas: ${reservasData.reservas?.length || 0}`);
    
    if (reservasData.reservas && reservasData.reservas.length > 0) {
      console.log('\nüìã √öltimas 3 reservas:');
      const ultimas = reservasData.reservas.slice(-3);
      ultimas.forEach((r, idx) => {
        console.log(`\n   ${idx + 1}. ${r.Cliente || '(sin nombre)'}`);
        console.log(`      ID: ${r.ID || '‚ùå VAC√çO'}`);
        console.log(`      Fecha: ${r.Fecha || '‚ùå VAC√çO'}`);
        console.log(`      Mesa: ${r.Mesa || '(sin asignar)'}`);
        console.log(`      Estado: ${r.Estado || '‚ùå VAC√çO'}`);
      });
    }
    
    // ============================================
    // PASO 2: Detectar filas desalineadas
    // ============================================
    console.log('\n\nüîç PASO 2: Detectando filas desalineadas...\n');
    
    const dryRunResponse = await fetch(
      `${API_URL}/api/google-sheets/fix-alignment?restaurantId=${RESTAURANT_ID}&dryRun=true`,
      { method: 'POST' }
    );
    
    if (!dryRunResponse.ok) {
      const text = await dryRunResponse.text();
      console.error('‚ùå Error al detectar filas:', text.substring(0, 200));
      return;
    }
    
    const dryRunData = await dryRunResponse.json();
    
    if (dryRunData.misalignedRows && dryRunData.misalignedRows.length > 0) {
      console.log(`‚ö†Ô∏è  Encontradas ${dryRunData.misalignedRows.length} filas DESALINEADAS:\n`);
      
      dryRunData.misalignedRows.forEach(row => {
        console.log(`   ‚ùå Fila ${row.row}:`);
        console.log(`      ‚Ä¢ ID en columna incorrecta: ${row.currentFirstValue}`);
        console.log(`      ‚Ä¢ Vista previa: ${row.preview.slice(0, 4).join(' | ')}`);
      });
      
      // ============================================
      // PASO 3: Corregir las filas
      // ============================================
      console.log('\n\nüîß PASO 3: Corrigiendo filas desalineadas...\n');
      console.log('‚è≥ Esto puede tomar unos segundos...\n');
      
      const fixResponse = await fetch(
        `${API_URL}/api/google-sheets/fix-alignment?restaurantId=${RESTAURANT_ID}`,
        { method: 'POST' }
      );
      
      if (!fixResponse.ok) {
        const text = await fixResponse.text();
        console.error('‚ùå Error al corregir:', text.substring(0, 200));
        return;
      }
      
      const fixData = await fixResponse.json();
      
      if (fixData.success) {
        console.log(`‚úÖ Se corrigieron ${fixData.corrected} filas exitosamente:\n`);
        fixData.details.forEach(detail => {
          console.log(`   ‚úì Fila ${detail.row}: ${detail.cliente} (${detail.id})`);
        });
      } else {
        console.error('‚ùå Error al corregir:', fixData.error);
        return;
      }
      
      // Esperar un momento para que los cambios se propaguen
      console.log('\n‚è≥ Esperando 3 segundos para que los cambios se propaguen...');
      await wait(3000);
      
    } else {
      console.log('‚úÖ No se encontraron filas desalineadas. Todo est√° correcto.\n');
    }
    
    // ============================================
    // PASO 4: Verificar reservas despu√©s de la correcci√≥n
    // ============================================
    console.log('\n\nüìä PASO 4: Verificando reservas despu√©s de la correcci√≥n...\n');
    
    const reservasPostResponse = await fetch(`${API_URL}/api/google-sheets/reservas?restaurantId=${RESTAURANT_ID}`);
    const reservasPostData = await reservasPostResponse.json();
    
    console.log(`‚úì Total de reservas: ${reservasPostData.reservas?.length || 0}`);
    
    // Verificar que todas las reservas tienen ID
    const sinID = reservasPostData.reservas?.filter(r => !r.ID) || [];
    if (sinID.length > 0) {
      console.log(`‚ö†Ô∏è  A√∫n hay ${sinID.length} reservas sin ID`);
    } else {
      console.log('‚úÖ Todas las reservas tienen ID correctamente asignado');
    }
    
    // ============================================
    // PASO 5: Crear reserva de prueba
    // ============================================
    console.log('\n\nüß™ PASO 5: Creando reserva de prueba para verificar...\n');
    
    const fechaPrueba = '2025-10-26';
    const horaPrueba = '20:00';
    
    console.log('üìù Datos de la reserva de prueba:');
    console.log(`   ‚Ä¢ Cliente: Test Final Alineaci√≥n`);
    console.log(`   ‚Ä¢ Fecha: ${fechaPrueba}`);
    console.log(`   ‚Ä¢ Hora: ${horaPrueba}`);
    console.log(`   ‚Ä¢ Personas: 2`);
    console.log(`   ‚Ä¢ Zona: Sala Principal\n`);
    
    // Verificar disponibilidad
    const availParams = new URLSearchParams({
      restaurantId: RESTAURANT_ID,
      fecha: fechaPrueba,
      hora: horaPrueba,
      personas: '2',
      zona: 'Sala Principal'
    });
    
    const availResponse = await fetch(`${API_URL}/api/google-sheets/disponibilidad?${availParams}`);
    const availData = await availResponse.json();
    
    console.log(`‚úì Disponibilidad: ${availData.disponible ? '‚úÖ S√ç' : '‚ùå NO'}`);
    
    if (availData.disponible) {
      console.log(`‚úì Mesa sugerida: ${availData.mesa}`);
      console.log(`‚úì ${availData.mensaje}\n`);
      
      // Crear la reserva
      console.log('‚è≥ Creando reserva...\n');
      
      const createResponse = await fetch(`${API_URL}/api/retell/functions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          function_name: 'crear_reserva',
          restaurantId: RESTAURANT_ID,
          args: {
            fecha: fechaPrueba,
            hora: horaPrueba,
            personas: 2,
            cliente: 'Test Final Alineaci√≥n',
            telefono: '+34611222333',
            zona: 'Sala Principal',
            notas: 'Prueba de alineaci√≥n correcta - Script autom√°tico'
          }
        })
      });
      
      const createData = await createResponse.json();
      
      if (createData.result?.success) {
        console.log('‚úÖ ¬°RESERVA CREADA EXITOSAMENTE!\n');
        console.log(`   ‚Ä¢ ID generado: ${createData.result.reserva?.ID || 'N/A'}`);
        console.log(`   ‚Ä¢ Mensaje: ${createData.result.mensaje}`);
        
        // Esperar y verificar en Google Sheets
        console.log('\n‚è≥ Esperando 2 segundos para verificar en Google Sheets...');
        await wait(2000);
        
        const verifyResponse = await fetch(`${API_URL}/api/google-sheets/reservas?restaurantId=${RESTAURANT_ID}`);
        const verifyData = await verifyResponse.json();
        
        const nuevaReserva = verifyData.reservas?.find(r => r.Cliente === 'Test Final Alineaci√≥n');
        
        if (nuevaReserva) {
          console.log('\n‚úÖ ¬°VERIFICACI√ìN EXITOSA! Reserva encontrada en Google Sheets:\n');
          console.log('   üìã Datos completos:');
          console.log(`      ‚Ä¢ ID: ${nuevaReserva.ID || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Fecha: ${nuevaReserva.Fecha || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Hora: ${nuevaReserva.Hora || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Turno: ${nuevaReserva.Turno || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Cliente: ${nuevaReserva.Cliente || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Tel√©fono: ${nuevaReserva.Telefono || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Personas: ${nuevaReserva.Personas || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Zona: ${nuevaReserva.Zona || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Mesa: ${nuevaReserva.Mesa || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Estado: ${nuevaReserva.Estado || '‚ùå FALTA'}`);
          console.log(`      ‚Ä¢ Notas: ${nuevaReserva.Notas || '(vac√≠o)'}`);
          console.log(`      ‚Ä¢ Creado: ${nuevaReserva.Creado || '‚ùå FALTA'}`);
          
          // Verificar que TODOS los campos est√°n presentes
          const camposRequeridos = ['ID', 'Fecha', 'Hora', 'Turno', 'Cliente', 'Telefono', 'Personas', 'Zona', 'Mesa', 'Estado', 'Creado'];
          const camposFaltantes = camposRequeridos.filter(campo => !nuevaReserva[campo]);
          
          if (camposFaltantes.length === 0) {
            console.log('\n   üéâ ¬°TODOS LOS CAMPOS EST√ÅN CORRECTAMENTE ALINEADOS!');
          } else {
            console.log(`\n   ‚ö†Ô∏è  Campos faltantes: ${camposFaltantes.join(', ')}`);
          }
          
        } else {
          console.log('\n‚ö†Ô∏è  No se encontr√≥ la reserva inmediatamente (puede ser cache)');
          console.log('   Verifica manualmente en Google Sheets en unos segundos');
        }
        
      } else {
        console.error('\n‚ùå Error al crear reserva:', createData.result?.error || createData.error);
      }
      
    } else {
      console.log(`‚ö†Ô∏è  No hay disponibilidad para la fecha de prueba`);
      console.log(`   Raz√≥n: ${availData.mensaje}`);
      console.log('\n   Pero el fix de alineaci√≥n deber√≠a estar funcionando de todas formas.');
    }
    
    // ============================================
    // RESUMEN FINAL
    // ============================================
    console.log('\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ PROCESO COMPLETADO');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('\nüìù Resumen:');
    console.log(`   ‚Ä¢ Filas corregidas: ${dryRunData.misalignedRows?.length || 0}`);
    console.log(`   ‚Ä¢ Total de reservas: ${reservasPostData.reservas?.length || 0}`);
    console.log(`   ‚Ä¢ Reserva de prueba: Creada y verificada`);
    console.log('\nüîó Verifica en Google Sheets:');
    console.log('   https://docs.google.com/spreadsheets/d/115x4UoUrtTxaG1vYzCReKaOonu7-5CTv4f9Oxe3e_J4/edit#gid=0');
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
  } catch (error) {
    console.error('\n‚ùå ERROR GENERAL:', error.message);
    console.error(error);
  }
}

// Ejecutar
main();
